
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.DataInputStream;
import java.io.*;
import java.net.*;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.AbstractTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Karan
 */
public class user1 extends javax.swing.JFrame {

     JFileChooser jfc2;
    File f2;
     
    ArrayList<userdata> al = new ArrayList<>();
    mytable tm;

    ArrayList<userdata2> al1 = new ArrayList<>();
    mytable2 tm2;

    ArrayList<userdata3> al2 = new ArrayList<>();
    mytable3 tm3;

    String u;

    public user1(String u) {
        initComponents();
        this.setSize(700, 700);
        this.u = u;
        tm = new mytable();
        jt1.setModel(tm);

        tm2 = new mytable2();
        jt2.setModel(tm2);

        tm3 = new mytable3();
        jt3.setModel(tm3);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jtp = new javax.swing.JTabbedPane();
        jPanel9 = new javax.swing.JPanel();
        tf1 = new javax.swing.JTextField();
        bt2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jt1 = new javax.swing.JTable();
        bt3 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jt2 = new javax.swing.JTable();
        bt4 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jt3 = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        bt1 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        lb1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        bt5 = new javax.swing.JButton();
        bt6 = new javax.swing.JButton();
        tf2 = new javax.swing.JTextField();
        jlb = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel5.setLayout(null);
        jTabbedPane1.addTab("Wall", jPanel5);

        jPanel6.setLayout(null);

        jtp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jtpStateChanged(evt);
            }
        });

        jPanel9.setLayout(null);

        tf1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                tf1CaretUpdate(evt);
            }
        });
        jPanel9.add(tf1);
        tf1.setBounds(50, 30, 250, 40);

        bt2.setText("Search");
        bt2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt2ActionPerformed(evt);
            }
        });
        jPanel9.add(bt2);
        bt2.setBounds(370, 33, 110, 30);

        jt1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jt1);

        jScrollPane1.setViewportView(jScrollPane2);

        jPanel9.add(jScrollPane1);
        jScrollPane1.setBounds(50, 90, 520, 190);

        bt3.setText("Follow");
        bt3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt3ActionPerformed(evt);
            }
        });
        jPanel9.add(bt3);
        bt3.setBounds(260, 300, 73, 30);

        jtp.addTab("Search", jPanel9);

        jPanel10.setLayout(null);

        jt2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jt2);

        jPanel10.add(jScrollPane3);
        jScrollPane3.setBounds(90, 50, 360, 220);

        bt4.setText("Unfollow");
        bt4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt4ActionPerformed(evt);
            }
        });
        jPanel10.add(bt4);
        bt4.setBounds(203, 300, 120, 30);

        jtp.addTab("My following", jPanel10);

        jPanel11.setLayout(null);

        jt3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jt3);

        jPanel11.add(jScrollPane4);
        jScrollPane4.setBounds(130, 60, 380, 230);

        jtp.addTab("My followers", jPanel11);

        jPanel6.add(jtp);
        jtp.setBounds(20, 40, 620, 390);

        jTabbedPane1.addTab("Manage friends", jPanel6);

        jPanel8.setLayout(null);

        bt1.setText("Change password");
        bt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt1ActionPerformed(evt);
            }
        });
        jPanel8.add(bt1);
        bt1.setBounds(530, 150, 119, 23);

        jTabbedPane1.addTab("Settings", jPanel8);

        jPanel7.setLayout(null);

        lb1.setText("Tittle");
        jPanel7.add(lb1);
        lb1.setBounds(50, 50, 110, 30);

        jLabel1.setText("Cover Photo");
        jPanel7.add(jLabel1);
        jLabel1.setBounds(40, 120, 90, 20);

        bt5.setText("Browse");
        bt5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt5ActionPerformed(evt);
            }
        });
        jPanel7.add(bt5);
        bt5.setBounds(220, 110, 90, 40);

        bt6.setText("NEXT");
        bt6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt6ActionPerformed(evt);
            }
        });
        jPanel7.add(bt6);
        bt6.setBounds(100, 240, 100, 30);
        jPanel7.add(tf2);
        tf2.setBounds(210, 50, 160, 30);

        jlb.setText("preview");
        jPanel7.add(jlb);
        jlb.setBounds(340, 110, 100, 100);

        jTabbedPane1.addTab("Post Story", jPanel7);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(40, 50, 740, 480);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt1ActionPerformed
        new changepassword(u).setVisible(true);
    }//GEN-LAST:event_bt1ActionPerformed

    private void bt2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt2ActionPerformed

        new Thread(new Runnable() {
            @Override
            public void run() {
                al.clear();
                String key = tf1.getText();
                try {
                    Socket sock = new Socket("localhost", 9000);
                    DataInputStream dis = new DataInputStream(sock.getInputStream());
                    DataOutputStream dos = new DataOutputStream(sock.getOutputStream());
                    dos.writeBytes("SEARCH REQUEST\r\n");
                    dos.writeBytes(key + "\r\n");

                    while (true) {
                        String user = dis.readLine();

                        System.out.println(user);
                        if (user.equals("done")) {

                            break;
                        }
                        String mail = dis.readLine();
                        al.add(new userdata(user, mail, "Follow"));

                    }

                    tm.fireTableDataChanged();

                } catch (Exception ex) {
                    ex.printStackTrace();
                }

            }
        }).start();
    }//GEN-LAST:event_bt2ActionPerformed

    private void tf1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_tf1CaretUpdate

        new Thread(new Runnable() {
            @Override
            public void run() {
                al.clear();
                tm.fireTableDataChanged();
                String key = tf1.getText();
                if (key.equals("")) {
                    al.clear();
                    tm.fireTableDataChanged();
                } else {
                    try {
                        Socket sock = new Socket("localhost", 9000);
                        DataInputStream dis = new DataInputStream(sock.getInputStream());
                        DataOutputStream dos = new DataOutputStream(sock.getOutputStream());
                        dos.writeBytes("SEARCH REQUEST\r\n");
                        dos.writeBytes(key + "\r\n");
                        dos.writeBytes(u + "\r\n");

                        while (true) {
                            String user = dis.readLine();

                            System.out.println(user);
                            if (user.equals("done")) {

                                break;
                            }
                            String mail = dis.readLine();
                            String type = dis.readLine();

                            if (user.equals(u)) {
                                continue;
                            }
                            al.add(new userdata(user, mail, type));

                        }

                        tm.fireTableDataChanged();

                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }).start();

// TODO add your handling code here:
    }//GEN-LAST:event_tf1CaretUpdate

    private void bt3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt3ActionPerformed
        int index = jt1.getSelectedRow();
        if (index > -1) {
            String uf = al.get(index).type;
            if (uf.equals("follow")) {
                try {
                    Socket sock = new Socket("localhost", 9000);
                    DataInputStream dis = new DataInputStream(sock.getInputStream());
                    DataOutputStream dos = new DataOutputStream(sock.getOutputStream());
                    dos.writeBytes("FOLLOW FRIEND REQUEST\r\n");
                    dos.writeBytes(u + "\r\n");
                    String u2 = al.get(index).username;
                    dos.writeBytes(u2 + "\r\n");
                    String r = dis.readLine();
                    if (r.equals("success")) {
                        JOptionPane.showMessageDialog(this, "Followed successfully");
                        al.get(index).type = "Followed";
                        tm.fireTableDataChanged();

                    }

                } catch (Exception ex) {
                    ex.printStackTrace();
                }

            } else {
                JOptionPane.showMessageDialog(this, "You have already followed ");
            }

        }

    }//GEN-LAST:event_bt3ActionPerformed

    private void jtpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jtpStateChanged
        if (jtp.getSelectedIndex() == 1) {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        al1.clear();

                        Socket sock = new Socket("localhost", 9000);
                        DataInputStream dis = new DataInputStream(sock.getInputStream());
                        DataOutputStream dos = new DataOutputStream(sock.getOutputStream());
                        dos.writeBytes("SEND FOLLOWING REQUEST\r\n");
                        dos.writeBytes(u + "\r\n");

                        while (true) {
                            String fn = dis.readLine();
                            if (fn.equals("done")) {
                                break;
                            }
                            al1.add(new userdata2(fn, "Followed"));
                        }
                        tm2.fireTableDataChanged();

                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }

                }
            }).start();

        } ////////////////////////////////////
        else if (jtp.getSelectedIndex() == 2) {

            new Thread(new Runnable() {
                @Override
                public void run() {

                    try {
                        al2.clear();

                        Socket sock = new Socket("localhost", 9000);
                        DataInputStream dis = new DataInputStream(sock.getInputStream());
                        DataOutputStream dos = new DataOutputStream(sock.getOutputStream());
                        dos.writeBytes("SHOW FOLLOWERS\r\n");
                        dos.writeBytes(u + "\r\n");

                        while (true) {
                            String fn = dis.readLine();
                            System.out.println(fn);
                            if (fn.equals("done")) {
                                break;
                            }
                            al2.add(new userdata3(fn));
                        }
                        tm3.fireTableDataChanged();

                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }).start();

        }


    }//GEN-LAST:event_jtpStateChanged

    private void bt4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt4ActionPerformed

        new Thread(new Runnable() {
            @Override
            public void run() {
                int index = jt2.getSelectedRow();
                if (index > -1) {
                    String uf2 = al1.get(index).username;
                    try {
                        Socket sock = new Socket("localhost", 9000);
                        DataInputStream dis = new DataInputStream(sock.getInputStream());
                        DataOutputStream dos = new DataOutputStream(sock.getOutputStream());
                        dos.writeBytes("UNFOLLOW FRIEND REQUEST\r\n");
                        dos.writeBytes(u + "\r\n");
                        dos.writeBytes(uf2 + "\r\n");
                        String r = dis.readLine();
                        al1.remove(index);

                        if (r.equals("unfollow success")) {
                            JOptionPane.showMessageDialog(user1.this, "Unfollowed successfully");
                        }
                        tm2.fireTableDataChanged();

                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }

                }
            }
        }).start();
    }//GEN-LAST:event_bt4ActionPerformed

    private void bt5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt5ActionPerformed
        jfc2 = new JFileChooser("Downloads");
         jfc2.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jfc2.addChoosableFileFilter(new FileNameExtensionFilter("Images", "jpg"));
        jfc2.setAcceptAllFileFilterUsed(false);

        int ans = jfc2.showOpenDialog(this);
        if (ans == JFileChooser.APPROVE_OPTION) {
            f2= jfc2.getSelectedFile();
            
            try {
                BufferedImage bimg=ImageIO.read(f2);
            Image img=bimg.getScaledInstance(jlb.getWidth(), jlb.getHeight(), Image.SCALE_SMOOTH);
            jlb.setIcon(new ImageIcon(img));
            } catch (Exception e) {
            e.printStackTrace();
            }
            System.out.println(f2);
        }
    }//GEN-LAST:event_bt5ActionPerformed

    private void bt6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt6ActionPerformed
          new Thread(new Runnable() 
          {
              public void run() 
              {
                  String t=tf2.getText();
                   try {
                        Socket sock = new Socket("localhost", 9000);
                        DataInputStream dis = new DataInputStream(sock.getInputStream());
                        DataOutputStream dos = new DataOutputStream(sock.getOutputStream());
                        dos.writeBytes("POST STORY\r\n");
                        dos.writeBytes( t+ "\r\n");
                      
                         
////////////////////////////////////
                        dos.writeLong(f2.length());
                        FileInputStream fis = new FileInputStream(f2);

                        long count = 0;
                        byte b[] = new byte[100000];
                        int q;
                        while (true) {
                            q = fis.read(b, 0, 100000);
                            count = count + q;
                            System.out.println(q);
                            if (q == -1) {
                                break;
                            }
                            dos.write(b, 0, q);
                            if (q == f2.length()) {
                                break;
                            }
                        }
                        //////////////////////////////////////
                        
                        int sid=Integer.parseInt(dis.readLine());
                        String r=dis.readLine();
                        System.out.println(r);
                        System.out.println(sid);
                        if(r.equals("success"))
                        {
                             new Storyphotos(sid).setVisible(true);
                             
                        }
                        
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                  
                  
              }
              
              
          }).start();
        
    }//GEN-LAST:event_bt6ActionPerformed
///////////////////INNER CLASS////////////////

    class userdata {

        String email, username, type;

        userdata(String username, String email, String type) {
            this.username = username;
            this.type = type;
            this.email = email;

        }

    }

    class mytable extends AbstractTableModel {

        @Override
        public int getRowCount() {
            return al.size();
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public Object getValueAt(int i, int j) {
            userdata us = al.get(i);
            if (j == 0) {
                return us.username;
            } else if (j == 1) {
                return us.email;
            } else {
                return us.type;
            }
//             else
//                 return "anything";
        }

        @Override
        public String getColumnName(int pos) {
            String col[] = {"usernsme", "e-mail", "type"};
            return col[pos];
        }

    }

    class userdata2 {

        String username, type;

        userdata2(String username, String type) {
            this.username = username;
            this.type = type;

        }

    }

    class mytable2 extends AbstractTableModel {

        @Override
        public int getRowCount() {
            return al1.size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Object getValueAt(int i, int j) {
            userdata2 us2 = al1.get(i);
            if (j == 0) {
                return us2.username;
            } else {
                return us2.type;
            }
//             else
//                 return "anything";
        }

        @Override
        public String getColumnName(int pos) {
            String col[] = {"username", "type"};
            return col[pos];
        }

    }

    class userdata3 {

        String username;

        userdata3(String username) {
            this.username = username;

        }

    }

    class mytable3 extends AbstractTableModel {

        @Override
        public int getRowCount() {
            return al2.size();
        }

        @Override
        public int getColumnCount() {
            return 1;
        }

        @Override
        public Object getValueAt(int i, int j) {
            userdata3 us = al2.get(i);
            if (j == 0) {
                return us.username;
            }
            return null;
        }

        @Override
        public String getColumnName(int pos) {
            String col[] = {"usernsme"};
            return col[pos];
        }

    }

    ///////////////////////////////////////////
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(user1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(user1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(user1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(user1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new user1("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt1;
    private javax.swing.JButton bt2;
    private javax.swing.JButton bt3;
    private javax.swing.JButton bt4;
    private javax.swing.JButton bt5;
    private javax.swing.JButton bt6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel jlb;
    private javax.swing.JTable jt1;
    private javax.swing.JTable jt2;
    private javax.swing.JTable jt3;
    private javax.swing.JTabbedPane jtp;
    private javax.swing.JLabel lb1;
    private javax.swing.JTextField tf1;
    private javax.swing.JTextField tf2;
    // End of variables declaration//GEN-END:variables
}
